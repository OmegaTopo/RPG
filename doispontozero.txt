#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <malloc.h>

// --------------------------------- PROTÓTIPOS DAS FUNÇÕES

// --------------------------------- STRUCTS

struct classAbility {
    int   inteligencia;
    int   magia;
    int   espirito; 
};

struct raceAbility {
    int   hp;
    int   forca;
    int   esquiva;  
};

struct persona {
    char    nomePersonagem[30];
    int     xp;
    int     nivel;
    struct  raceAbility raca;
    struct  classAbility classe; 
};

struct enemies {
    char    nomeInimigo[30];
    int     forca;
    int     hp;
    int     defesa;
    int     esquiva;
    int     magia;
};
 
int main(){

// Declaração de variáveis para a personagem
struct persona personagem;
struct persona *ptr_personagem = &personagem;

// Declaração de variáveis para a raca anão
struct raceAbility anao;
struct raceAbility *ptr_anao;
ptr_anao = &anao;
        
// Declaração de variáveis para a raca elfo
struct raceAbility elfo;
struct raceAbility *ptr_elfo;
ptr_elfo = &elfo;
        
// Declaração de variáveis para a raca humano
struct raceAbility humano;
struct raceAbility * ptr_humano;
ptr_humano = &humano;

// Declaração de variáveis para a classe guerreiro
struct classAbility guerreiro;
struct classAbility *ptr_guerreiro;
ptr_guerreiro = &guerreiro;

// Declaração de variáveis para a classe mago
struct classAbility mago;
struct classAbility *ptr_mago;
ptr_mago = &mago;

// Declaração de variáveis para a classe ladino
struct classAbility ladino;
struct classAbility *ptr_ladino;
ptr_ladino = &ladino;

// Declaração de variáveis do main
int quantInimigos = 0;
int i = 0; 
int exit = 0;
int menuEscolha = 0;
int sorteioInimigo = 0;
int dado = 0;


// Declaração de variáveis para inimigos
struct enemies inimigos[4];

    
    

    // Criação e inicialização do personagem
    nomePersonagem(&personagem);
    escolhaRacaPersonagem(&personagem, &anao, &elfo, &humano);
    escolhaClassePersonagem(&personagem, &guerreiro, &mago, &ladino);
    printAtributosPersonagem(&personagem);
    system("pause");
    system("cls");

    // Criação e inicialização de inimigos
    printf("\n----------------------- CRIACAO DE INIMIGOS -----------------------\n");
    printf("Bem vindo ao RPG Deltora, nessa parte iniciaremos os inimigos. \n");
    printf("O status de ataque, defesa e outros atributos serao adicionados nesta area. Serão 8 inimigos no total.\n\n");

    printf("\nAgora vamos preencher os status dos inimigos.\n");

    for (i = 0; i < 4; i++)
    {   
        do 
        {   
            printf("\n------ Inimigo %d\n", i+1);
            printf("\nNome: ");
            scanf("%s", inimigos[i].nomeInimigo);
            setbuf(stdin, NULL);

                if (strlen(inimigos[i].nomeInimigo) > 30)
                {   
                    printf("\n\nValor Invalido\nMaximo 30 caracteres\n\nRepita...\n\n");
                }
        } while (strlen(inimigos[i].nomeInimigo) > 30);

        printf("Forca: ");
        scanf("%d", &inimigos[i].forca);

        printf("HP: ");
        scanf("%d", &inimigos[i].hp);

        printf("Defesa: ");
        scanf("%d", &inimigos[i].defesa);

        printf("Esquiva: ");
        scanf("%d", &inimigos[i].esquiva);

        printf("Magia: ");
        scanf("%d", &inimigos[i].magia);

        printf("\n\n");
        printAtributosInimigos(&inimigos, i);
        system("pause");
        system("cls");
    }

    printf("\n\n----------------------- INICIO DO JOGO ----------------------- \n\n");

    printf("Voce acaba de bater de frente com seu inimigo!!\n\n");

    sorteioInimigo = randInimigos(4);
    
    printAtributosInimigos(&inimigos, sorteioInimigo);
    system("pause");
    system("cls");

    do 
    {   
        printf("Escolha sua ação: \n");
        menuEscolha = menuInteracaoBatalha();

        if(menuEscolha == 1){
            printf("Vamos rodar o dado: \n");
            dado = rolagemDado();
            pritnf("Valor no dado: %d\n", dado);

            ataquePersonagem(&personagem, &inimigos, sorteioInimigo, dado);
        }

        //if (menuEscolha == 2){}
        
        
        system("pause");
        system("cls");
    } while (personagem.raca.hp > 0 || inimigos[sorteioInimigo].hp > 0);
    
        

    if (personagem.raca.hp <= 0)
        printf("Você morreu!");

    if (inimigos[sorteioInimigo].hp <= 0)
        printf("Derrotou seu inimigo!\n");

    upaPersonagem(&personagem);        

    system("pause");
return 0;
}

// --------------------------------- CORPO DAS FUNÇÕES 

// Funções para alimentação dos atributos da personagem
void nomePersonagem(struct persona *personagem)
{   
    system("cls");
    printf("\n\n----------------------- CRIACAO DE PERSONAGEM -----------------------\n\n");
    do 
    {
        printf("Insira o nome do seu personagem: ");
        scanf("%s", personagem->nomePersonagem);

            if (strlen(personagem->nomePersonagem) > 30)
            {   
                system("cls");
                printf("\n\nValor Invalido\nMaximo 30 caracteres\n\nRepita...\n\n");
            }
    } while (strlen(personagem->nomePersonagem) > 30);

    printf("\n\nBem vindo a Deltora, nobre %s! \n\nEscolha sua raca!\n\n", personagem->nomePersonagem);

    personagem->xp = 1;
    personagem->nivel = 1;
}

void escolhaRacaPersonagem(struct persona *personagem, struct raceAbility *anao, struct raceAbility *elfo, struct raceAbility *humano)
{   
    // AAtributos para anões 
    anao->forca             = 18;
    anao->hp                = 22;
    anao->esquiva           = 8;

    // Atributos para elfos
    elfo->forca             = 17;
    elfo->hp                = 17; 
    elfo->esquiva           = 14;

    //Atributos para humanos
    humano->forca           = 17;
    humano->hp              = 17;
    humano->esquiva         = 16;
    
    int escolhaRaca = 0;

	printf("(1) ANAO  \nForca = %d \nHP = %d  \nEsquiva = %d  \n\n", anao->forca, anao->hp, anao->esquiva);
	printf("(2) ELFO  \nForca = %d \nHP = %d  \nEsquiva = %d  \n\n", elfo->forca, elfo->hp, elfo->esquiva);
    printf("(3) HUMANO\nForca = %d \nHP = %d  \nEsquiva = %d  \n\n", humano->forca, humano->hp, humano->esquiva);

        do
        {
            printf("Digite sua escolha: (1), (2) ou (3)\n");
            scanf(" %d", &escolhaRaca);
      
                if (escolhaRaca <= 0 || escolhaRaca > 3)
                {
                    printf("\n\nValor invalido\nSomente valores os (1)(2)(3) sao aceitos \nDigite novamente...\n\n");
                }
                    
        } while (escolhaRaca <= 0 || escolhaRaca > 3);

        if (escolhaRaca == 1)
        {			
            personagem->raca = *anao;
        }
		    else 
                if (escolhaRaca == 2)
                {
                   personagem->raca = *elfo;
                }
		            else	
                        if (escolhaRaca == 3)
                        {
                            personagem->raca = *humano;
                        }
        system("cls");

        printf("Muito bem! Agora escolha sua classe:\n\n");
}

void escolhaClassePersonagem(struct persona *personagem, struct classAbility *guerreiro, struct classAbility *mago, struct classAbility *ladino)
{
    int escolhaClasse = 0;

    guerreiro->inteligencia  = 18;
    guerreiro->magia         = 6;
    guerreiro->espirito      = 24;

    mago->inteligencia       = 20;
    mago->magia              = 22;
    mago->espirito           = 6;

    ladino->inteligencia     = 24;
    ladino->magia            = 18;
    ladino->espirito         = 6;
    
    printf("(1) Guerreiro \nInteligencia = %d \nMagia = %d  \nEspirito = %d  \n\n", guerreiro->inteligencia, guerreiro->magia, guerreiro->espirito);
    printf("(2) Mago      \nInteligencia = %d \nMagia = %d  \nEspirito = %d  \n\n", mago->inteligencia, mago->magia, mago->espirito);
    printf("(3) Ladino    \nInteligencia = %d \nMagia = %d  \nEspirito = %d  \n\n", ladino->inteligencia, ladino->magia, ladino->espirito);
	

        do
        {
            printf("Digite sua escolha: (1), (2) ou (3)\n");
            scanf(" %d", &escolhaClasse);
      
                if (escolhaClasse <= 0 || escolhaClasse > 3)
                {
                    printf("\n\nValor invalido\nSomente valores os (1)(2)(3) sao aceitos \nDigite novamente...\n\n");
                }
                    
        } while (escolhaClasse <= 0 || escolhaClasse > 3);

        if (escolhaClasse == 1)
        {			
            personagem->classe = *guerreiro;
        }
		    else 
                if (escolhaClasse == 2)
                {
                   personagem->classe = *mago;
                }
		            else	
                        if (escolhaClasse == 3)
                        {
                            personagem->classe = *ladino;
                        }

        system("cls");                
}

// Funções para printar os atributos do inimigo
void printAtributosInimigos (struct enemies *inimigos, int count)
{
    printf("%s \nForca: %d | HP: %d | Defesa: %d | Esquiva: %d | Magia: %d\n\n", inimigos[count].nomeInimigo, inimigos[count].forca, inimigos[count].hp, inimigos[count].defesa, inimigos[count].esquiva, inimigos[count].magia);
    
    
    /*printf("\nNome:    %s\n", inimigos[count].nomeInimigo);
    printf("Forca:   %d\n", inimigos[count].forca);
    printf("HP:      %d\n", inimigos[count].hp);
    printf("Defesa:  %d\n", inimigos[count].defesa);
    printf("Esquiva: %d\n", inimigos[count].esquiva);*/
}

// Função que define os atributos da struct do tipo raca do personagem com base no escolhido
void printAtributosPersonagem (struct persona *atributoPersonagem){

    printf("\n----------------------- PERSONAGEM -----------------------\n\n");
    printf("Nome:         %s\n", atributoPersonagem->nomePersonagem);
    printf("Experiencia:  %d\n", atributoPersonagem->xp);
    printf("Nivel:        %d\n", atributoPersonagem->nivel);

    printf("Forca: %d | HP %d | Esquiva: %d ", atributoPersonagem->raca.forca, atributoPersonagem->raca.hp, atributoPersonagem->raca.esquiva);
    printf("Inteligencia: %d | Magia: %d | Espirito: %d |\n", atributoPersonagem->classe.inteligencia, atributoPersonagem->classe.magia, atributoPersonagem->classe.espirito);
}

//Função para upar o personagem
void upaPersonagem(struct persona *personagem)
{
    if (personagem->xp > 100)
    {
        personagem->nivel++;
        personagem->xp = 0;
    }
    else {
        personagem->xp = personagem->xp + 30;
    }
}

//Função para o menu de interação
int menuInteracaoBatalha()
{
    int escolha; 

    printf("OPCOES: \n");
    printf("(1) Atacar\n");
    printf("(2) Fugir\n");
    printf("(3) Defender-se\n");

    do 
    {   
        scanf("%d", &escolha);
        if (escolha < 0 || escolha > 3)
        {
           printf("\n\nValor invalido\nSomente valores os (1)(2)(3) sao aceitos \nDigite novamente...\n\n"); 
        }
    } while (escolha <= 0 || escolha > 3);

    return escolha;
}

//Função para quando personagem escolhe atacar
void ataquePersonagem(struct persona *personagem, struct enemies *inimigos, int numInimigo, int dado)
{ 
    
    if (dado <= 5){
            printf("Voce eh azarado em, errou o ataque e ainda e ainda foi atacado!");
            ataqueMonstro(&personagem, &inimigos, numInimigo, dado);
    }
            else if (dado <= 10){
                printf("Hmm, vamos testar seu espirito de luta é o suficiente para não desistir!\n\n");
                system("pause");
                if (personagem->classe.espirito > (dado + 10)){
                    printf("Você demonstrou espirito nessa luta!, merece este ataque");
                    danoNoMonstro(&personagem, &inimigos, numInimigo, dado);
                }
                else{
                    printf("Eh, voce ate pode ter se dedicado a treinamentos ou ser espertinho, mas quando o assunto eh espirito de luta, voce eh decepcionante!\n\n");
                    ataqueMonstro(&personagem, &inimigos, numInimigo, dado);
                }
            }
                    else if (dado <= 15){
                        printf("Vamos la, voce tomou a diantera e agora sera recompensado!\n");
                        danoNoMonstro(&personagem, &inimigos, numInimigo, dado);
                    }   
                            else if (dado < 20){
                                printf("EITA! Vejo que voce esta pra poucos amigos!\n");
                                danoNoMonstro(&personagem, &inimigos, numInimigo, dado);
                            }   
                                    else if (dado == 20){
                                        printf("Meu deus, quem eh voce? Provalecido, um golpe foi o que bastou para terminar essa luta!");
                                        danoNoMonstro(&personagem, &inimigos, numInimigo, dado);
                                    }
                
}

//Função para quando teste indica que o monstro ataca
void ataqueMonstro(struct persona *personagem, struct enemies *inimigo, int numInimigo, int dado)
{
   if (personagem->raca.esquiva > (dado + 10)){
       printf("Sua esquiva esta em dia, desviou do ataque!\n\n");
   }

   else if (dado <= 5){
            
    }
            else if (dado <= 10){
                
            }
                    else if (dado <= 15){
                        
                    }   
                            else if (dado < 20){
                               
                            }   
                                    else if (dado == 20){
                                        
                                    }
}

//Runção que altera os atributos do monstro conforme o dano tomado 
void danoNoMonstro(struct persona *personagem, struct enemies *inimigos, int numInimigo, int dado)
{  
    if (dado <= 10){
        if (personagem->classe.espirito > (dado + 10)){
             inimigos[numInimigo].hp = inimigos[numInimigo].hp - personagem->raca.forca;
        }
    }
            else if (dado <= 15){
                    inimigos[numInimigo].hp = inimigos[numInimigo].hp - personagem->raca.forca;
                }   
                        else if (dado < 20){
                                inimigos[numInimigo].hp = inimigos[numInimigo].hp - (personagem->raca.forca + 5);
                            }   
                                    else if (dado == 20){
                                        inimigos[numInimigo].hp = 0;    
                                    }
}

// Função para rolar o dado
int rolagemDado()
{
    int numeroDado;
    srand(time(NULL));
    
    do{   
       numeroDado = rand() % 21;
    } while (numeroDado == 0);

    return numeroDado;
}

// Função para randomizar os inimigos
int randInimigos(int quantInimigos)
{
    int numeroDado;
    srand(time(NULL));
    
    do{   
       numeroDado = rand() % quantInimigos;
    } while (numeroDado == 0);

    return numeroDado;
}

